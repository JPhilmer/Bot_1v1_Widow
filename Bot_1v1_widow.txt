settings
{
	main
	{
		Description: "//[1vs1 TRAINING MOD WIDOW]\\\\                                                 /          NO HS ONLY) GL&HF         \\                                           .                .By Philmer (ã‚·)                                         You cant hold ur RMB more than 2s                                                 Training smartbot widow ^^"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
		Max FFA Players: 2
		Max Spectators: 12
	}

	modes
	{
		Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 50

			enabled maps
			{
				Castillo
			}
		}

		General
		{
			Limit Roles: 2 Of Each Role Per Team
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		General
		{
			Jump Vertical Speed: 107%
			Movement Speed: 107%
			Projectile Speed: 107%
			Ultimate Ability: Off

			Widowmaker
			{
				Grappling Hook Cooldown Time: 55%
				Jump Vertical Speed: 107%
				Movement Speed: 107%
				Projectile Speed: 107%
				Ultimate Ability Infra-Sight: Off
				Venom Mine: Off
			}

			enabled heroes
			{
				Ana
				Ashe
				Doomfist
				Genji
				Hanzo
				McCree
				Pharah
				Reaper
				Soldier: 76
				Tracer
				Widowmaker
			}
		}
	}
}

variables
{
	global:
		26: grappin_pos1
		27: grappin_pos2
		28: bumper_white
		29: bumper_red
		30: bumper_blue

	player:
		26: tps_respawn_bot
		27: tps_txt_end
}

rule("TRAINING ROOM BY <PHILMER>")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.J = Vector(-103.644, 37.181, 58.653);
		Create In-World Text(All Players(All Teams), Custom String("AIM TRAINING ROOM 1vs1"), Global.J + Vector(0, 35, 0), 2.200,
			Clip Against Surfaces, Visible To and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("By"), Global.J + Vector(0, 33, 0), 2, Clip Against Surfaces,
			Visible To Position and String, Color(Lime Green), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Philmer"), Global.J + Vector(0, 31, 0), 1.800, Clip Against Surfaces,
			Visible To Position and String, Color(Blue), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Bot training : Widow"), Global.J + Vector(0, 29, 0), 1.800,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
	}
}

rule("<///===================Philmer mod 1vs1 Widow=====================///>   Var Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.grappin_pos1 = Vector(-100.299, 39.058, 73.592);
		Global.grappin_pos2 = Vector(-106.271, 39.058, 43.087);
		Global.bumper_white = Vector(-129.412, 35.877, 63.636);
		Global.bumper_blue = Vector(-99.283, 34.066, 95.053);
		Global.bumper_red = Vector(-113.104, 34.749, 31.266);
	}
}

rule("if kills an enemy, Says hello")
{
	event
	{
		Player Earned Elimination;
		All;
		All;
	}

	conditions
	{
		Event Player == Is Alive(Event Player);
		Is Dummy Bot(Event Player) == Is Alive(Event Player);
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Hello);
	}
}

disabled rule("if scope (> 2 sec.) , gets stunned 1 sec")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Set Status(Event Player, Null, Stunned, 1);
		Small Message(Event Player, String("Stop"));
	}
}

disabled rule("scope timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.T = 2;
		Chase Player Variable At Rate(Event Player, T, 0, 1, Destination and Rate);
		Create HUD Text(Event Player, Event Player.T, Null, Null, Top, 1, Color(Yellow), Color(White), Color(Blue), Visible To and String,
			Default Visibility);
		Event Player.F = Last Text ID;
		Wait(0.557, Abort When False);
		Destroy HUD Text(Event Player.E);
	}
}

disabled rule("erase scope timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
	}

	actions
	{
		Destroy HUD Text(Event Player.F);
	}
}

rule("assemble time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Set Match Time(0);
		Disable Built-In Game Mode Completion;
	}
}

rule("match time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == False;
	}

	actions
	{
		Set Match Time(3600);
	}
}

rule("kill > heal")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		Heal(Event Player, Null, 999);
		Press Button(Event Player, Button(Reload));
	}
}

rule("respawn fast")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(0.280, Ignore Condition);
		Respawn(Event Player);
	}
}

rule("Bumper pad")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(-129.412, 35.877, 63.636), 0.755, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("BUMPER"), Vector(-129.412, 32.877, 63.636), 1.557, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
	}
}

rule("Bumper pad jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-129.412, 34.877, 63.636)) <= Absolute Value(1.300);
	}

	actions
	{
		Apply Impulse(Event Player, Up, 28, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Direction Towards(Vector(-129.412, 35.877, 63.636), Vector(-89.396, 40.143, 55.930)), 55, To World,
			Cancel Contrary Motion);
		Set Status(Event Player, Null, Rooted, Absolute Value(0.500));
	}
}

rule("TP zone pad A")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(-99.283, 34.066, 95.053), 0.755, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("TP"), Vector(-99.283, 32.066, 95.053), 1.557, Do Not Clip,
			Visible To Position and String, Color(Blue), Default Visibility);
	}
}

rule("TP pad A")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-99.283, 33.066, 95.053)) <= Absolute Value(1.300);
	}

	actions
	{
		Teleport(Event Player, Vector(-117.914, 42.772, 48.420));
	}
}

rule("TP zone pad B")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Red), Vector(-113.104, 34.749, 31.266), 0.755, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("TP"), Vector(-113.104, 32.749, 31.266), 1.557, Do Not Clip,
			Visible To Position and String, Color(Red), Default Visibility);
	}
}

rule("TP pad B")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-113.160, 33.749, 30.760)) <= Absolute Value(1.300);
	}

	actions
	{
		Teleport(Event Player, Vector(-113.121, 42.772, 72.854));
	}
}

rule("==== Bot widow for training ====")
{
	event
	{
		Ongoing - Global;
	}
}

rule("player enter in game")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Global.L = Count Of(All Players(All Teams));
		Global.G = 1 - Global.L;
	}
}

rule("player left the game")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		Global.L = Count Of(All Players(All Teams));
		Global.G = 1 - Global.L;
	}
}

rule("bot initialisation")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.F = Empty Array;
		Modify Global Variable(F, Append To Array, Hero(Widowmaker));
	}
}

rule("bot widow add spawn with pos")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.G >= Global.E;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Abort If Condition Is False;
		Create Dummy Bot(Random Value In Array(Global.F), All Teams, -1, Vector(-89.988, 40.140, 55.838), Random Value In Array(
			All Players(All Teams)));
		Loop If Condition Is True;
	}
}

disabled rule("TESTING FOV SURFACE VIEW SHOT")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Players in View Angle(Event Player, All Teams, 7) == True;
	}

	actions
	{
		Wait(0.005, Ignore Condition);
		Abort If Condition Is False;
		Start Facing(Event Player, Players On Hero(Hero(Widowmaker), All Teams), 400, To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Primary Fire));
		Loop;
	}
}

disabled rule("TESTING FOV SURFACE VIEW SHOT")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Line of Sight(Event Player, Players Within Radius(Farthest Player From(Event Player, All Teams), 557, All Teams, Surfaces),
			Barriers Do Not Block LOS) == True;
		Players in View Angle(Event Player, All Teams, 55) == True;
	}

	actions
	{
		Wait(0.005, Ignore Condition);
		Abort If Condition Is False;
		Press Button(Event Player, Button(Primary Fire));
		Loop If Condition Is True;
	}
}

rule("bot patern 1 deplacement")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 0.700, 2, 0, 0, 0.500, 2);
	}
}

rule("bot patern 2 view")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(0.287, Abort When False);
		Event Player.A = Attacker;
		Start Facing(Event Player, Vector Towards(Eye Position(Event Player), Eye Position(Event Player.A) + World Vector Of(Up,
			Event Player.A, Rotation) * 0.155 + World Vector Of(Vector(Speed Of In Direction(Event Player.A, World Vector Of(Left,
			Event Player, Rotation)) / Absolute Value(9999999.000) / 1, 0, 0), Event Player, Rotation)), Absolute Value(9999999.000)
			+ Absolute Value(9999999.000), To World, Direction and Turn Rate);
		Loop If Condition Is True;
	}
}

rule("bot patern 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Line of Sight(Players In Slot(0, All Teams), Event Player, Barriers Do Not Block LOS) == True;
		Players in View Angle(Event Player, All Teams, 55) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Distance Between(Event Player, Event Player.A) >= 7;
	}

	actions
	{
		Abort If Condition Is False;
		Wait(0.728, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Secondary Fire));
		Loop If Condition Is True;
	}
}

rule("bot patern 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Is In Line of Sight(Players In Slot(0, All Teams), Event Player, Barriers Do Not Block LOS) == True;
		Players in View Angle(Event Player, All Teams, 55) == True;
		Distance Between(Event Player, Event Player.A) <= 7;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Secondary Fire));
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(2.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("bot patern 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Moving(Event Player) == True;
		Is In Line of Sight(Players In Slot(0, All Teams), Event Player, Barriers Do Not Block LOS) == True;
		Players in View Angle(Event Player, All Teams, 55) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) != True;
	}

	actions
	{
		Wait(1.007, Ignore Condition);
		Abort If Condition Is False;
		Press Button(Event Player, Button(Jump));
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(0.450, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("bot patern 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Line of Sight(Players In Slot(0, All Teams), Event Player, Barriers Do Not Block LOS) == True;
		Players in View Angle(Event Player, All Teams, 55) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(1.007, Ignore Condition);
		Press Button(Event Player, Button(Primary Fire));
		Start Throttle In Direction(Event Player, Random Value In Array(Global.T), 1, To Player, Replace existing throttle, None);
		Wait(0.287, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Wait(0.728, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(1.007, Ignore Condition);
		Press Button(Event Player, Button(Primary Fire));
		Press Button(Event Player, Button(Primary Fire));
		Wait(0.728, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Start Throttle In Direction(Event Player, Random Value In Array(Global.T), 1, To World, Replace existing throttle, None);
		Wait(0.350, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Wait(1.007, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("bot patern 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is In Line of Sight(Players In Slot(0, All Teams), Event Player, Barriers Do Not Block LOS) == True;
		Players in View Angle(Event Player, All Teams, 55) == True;
		Is In Air(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Press Button(Event Player, Button(Primary Fire));
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("bot patern 8")
{
	event
	{
		Player Earned Elimination;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Is Dummy Bot(Victim) != True;
	}

	actions
	{
		Event Player.A = Remove From Array(All Living Players(All Teams), Event Player);
		Start Facing(Event Player, Vector Towards(Eye Position(Event Player), Eye Position(Event Player.A) + World Vector Of(Up,
			Event Player.A, Rotation) * 0.155 + World Vector Of(Vector(Speed Of In Direction(Event Player.A, World Vector Of(Left,
			Event Player, Rotation)) / Absolute Value(9999999.000) / 1, 0, 0), Event Player, Rotation)), Absolute Value(9999999.000)
			+ Absolute Value(9999999.000), To World, Direction and Turn Rate);
	}
}

rule("bot patern punch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Health(Event Player.A) <= 30;
		Distance Between(Event Player, Farthest Player From(Event Player, All Teams)) <= 3;
	}

	actions
	{
		Press Button(Event Player, Button(Melee));
	}
}

rule("bot patern grappin #1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-99.835, 34.055, 76.217)) <= Absolute Value(10);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Global.grappin_pos1), Absolute Value(9999999.000),
			To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.287, Abort When False);
		Stop Facing(Event Player);
		Wait(5.576, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("bot patern grappin #2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-106.680, 34.055, 40.731)) <= Absolute Value(10);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Global.grappin_pos2), Absolute Value(9999999.000),
			To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.287, Abort When False);
		Stop Facing(Event Player);
		Wait(5.576, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("zone effect grap #3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Lime Green), Vector(-73.993, 33.500, 52.648), 7.550,
			Visible To Position and Radius);
	}
}

rule("bot patern grappin #3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-73.993, 33.500, 52.648)) <= Absolute Value(7.550);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(-80.729, 39.358, 54.175)), Absolute Value(
			9999999.000), To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.287, Abort When False);
		Stop Facing(Event Player);
		Wait(5.576, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("zone effect grap #4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Lime Green), Vector(-82.265, 34.226, 37.771), 8.280,
			Visible To Position and Radius);
	}
}

rule("bot patern grappin #4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-82.265, 33.226, 37.771)) <= Absolute Value(8.280);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(-85.316, 40.075, 44.841)), Absolute Value(
			9999999.000), To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.287, Abort When False);
		Stop Facing(Event Player);
		Wait(5.576, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("zone effect grap #5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Lime Green), Vector(-76.093, 34.300, 69.966), 8.280,
			Visible To Position and Radius);
	}
}

rule("bot patern grappin #5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-76.093, 33.300, 69.966)) <= Absolute Value(8.280);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(-81.516, 40.078, 64.396)), Absolute Value(
			9999999.000), To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.287, Abort When False);
		Stop Facing(Event Player);
		Wait(5.576, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("zone effect grap statue")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Light Shaft, Color(Lime Green), Vector(-101.731, 36.564, 58.297), 14.550,
			Visible To Position and Radius);
	}
}

rule("bot patern grappin #6")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-101.731, 36, 58.297)) <= Absolute Value(14.550);
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Vector(-101.731, 36, 58.297)), Absolute Value(
			9999999.000), To World, Direction and Turn Rate);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.287, Abort When False);
		Stop Facing(Event Player);
		Wait(5.576, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Zone effect tp bumper white mid")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Orange), Vector(-125.282, 35.878, 63.010), 7.550,
			Visible To Position and Radius);
	}
}

disabled rule("bot patern bis grappin disable")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(Is Using Ability 1(Event Player));
			Disallow Button(Event Player, Button(Ability 1));
			Wait(5.550, Ignore Condition);
		End;
		Allow Button(Event Player, Button(Ability 1));
	}
}

rule("Zone action tp bumper white mid")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-125.282, 35.878, 63.010)) <= Absolute Value(7.550);
	}

	actions
	{
		Teleport(Event Player, Global.bumper_white);
	}
}

disabled rule("Zone effect tp bumper red house2 sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Red), Vector(-112.839, 34.066, 26.958), 8.280, Visible To Position and Radius);
	}
}

rule("Zone action tp bumper red house2 sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-112.839, 34.066, 26.958)) <= Absolute Value(8.280);
	}

	actions
	{
		Teleport(Event Player, Global.bumper_red);
	}
}

disabled rule("Zone effect tp bumper blue house1 pub")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(-100.269, 34.068, 91.017), 8.280, Visible To Position and Radius);
	}
}

rule("Zone action tp bumper blue house1 pub")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-100.269, 34.068, 91.017)) <= Absolute Value(8.280);
	}

	actions
	{
		Teleport(Event Player, Global.bumper_blue);
	}
}

rule("unblockZone_Debug 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-110.018, 35.014, 72.055)) <= Absolute Value(3.280);
	}

	actions
	{
		Teleport(Event Player, Vector(-113.112, 35.053, 80.871));
	}
}

rule("unblockZone_Debug 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-117.220, 35.407, 55.701)) <= Absolute Value(2.280);
	}

	actions
	{
		Teleport(Event Player, Vector(-113.887, 35.054, 53.326));
	}
}

rule("unblockZone_Debug 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-124.634, 33.996, 43.743)) <= Absolute Value(1.550);
	}

	actions
	{
		Teleport(Event Player, Vector(-121.382, 36.069, 45.948));
	}
}

rule("unblockZone_Debug 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-121.951, 39.055, 74.726)) <= Absolute Value(1.280);
	}

	actions
	{
		Teleport(Event Player, Vector(-120.405, 40.058, 72.385));
	}
}

rule("unblockZone_Debug 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-87.986, 39.140, 58.413)) <= Absolute Value(1.280);
	}

	actions
	{
		Teleport(Event Player, Vector(-84.872, 40.139, 59.446));
	}
}

rule("unblockZone_Debug 6 action_tp")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Score Of(Event Player.A) >= 1;
		Number Of Living Players(All Teams) == 2;
	}

	actions
	{
		Wait(30, Abort When False);
		Teleport(Event Player, Global.bumper_white);
		Loop If Condition Is True;
	}
}

rule("unblockZone_Debug 6 timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Number Of Living Players(All Teams) == 2;
	}

	actions
	{
		Event Player.tps_respawn_bot = 30;
		Chase Player Variable At Rate(Event Player, tps_respawn_bot, 0, 1, Destination and Rate);
		Create HUD Text(Event Player, Null, Custom String("TP Bot in : "), Event Player.tps_respawn_bot, Left, 1, Color(Yellow), Color(
			White), Color(Green), Visible To and String, Default Visibility);
		Event Player.tps_txt_end = Last Text ID;
		Wait(30, Abort When False);
		Destroy HUD Text(Event Player.tps_txt_end);
		Loop If Condition Is True;
		End;
	}
}

rule("unblockZone_Debug 6 erase timer")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Number Of Living Players(All Teams) != 2;
	}

	actions
	{
		Destroy HUD Text(Event Player.tps_txt_end);
	}
}

rule("unblockZone_Debug 7")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Distance Between(Event Player, Vector(-123.959, 35.303, 54.211)) <= Absolute Value(2.280);
	}

	actions
	{
		Teleport(Event Player, Vector(-121.713, 36.037, 58.887));
	}
}

disabled rule("effet sphere1 test grap1")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Aqua), Vector(-99.835, 34.055, 76.217), 10, Visible To Position and Radius);
	}
}

disabled rule("effet sphere2 test grap1")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Vector(-99.835, 34.055, 76.217), 9.557, Visible To Position and Radius);
	}
}

disabled rule("effet sphere1 test grap2")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Aqua), Vector(-106.680, 34.054, 40.731), 10, Visible To Position and Radius);
	}
}

rule("Bot_hello_asw")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Is Alive(Event Player);
		Is Communicating(Event Player, Hello) == True;
	}

	actions
	{
		Wait(1.287, Ignore Condition);
		Communicate(Closest Player To(Event Player, All Teams), Hello);
	}
}